//Define registers 
      // R0 used for many temporary purposes
      // R1 used for colours
      MOV R2,#.PixelScreen //Constant
      // R3 Tail position
      // R4 Head position
      // R9 holds ASCII value of last key pressed
      //R10 hold Apple position
      MOV R11, #0 //Score of apples eaten

//Set up interrupts - but don't enable yet
      MOV R0, #update
      STR R0, .ClockISR
      MOV R0,#0x19
      STR R0,.ClockInterruptFrequency
      MOV R0, #keyPress
      STR R0, .KeyboardISR
      MOV R0, #1
      STR R0, .KeyboardMask

//Initialise game
      MOV R3, #1084 //Initialise tail and ...
      MOV R4, #1088 //Head next to it (4 bytes = 1 word = 1 pixel)
      MOV R1, #.green 
      STR R1,[R3+R2] //Draw 2-segment snake
      STR R1,[R4+R2] 
      BL createApple
      STR R0, .InterruptRegister //Now we are ready to handle interrupts

mainLoop: b mainLoop //Just keeps the processor running, pending interrupts
//Interrupt driven
update:
//Switch on direction of last key
      CMP R9,#87 //W key
      BEQ up
      CMP R9,#65 //A key
      BEQ left
      CMP R9,#83 //S key
      BEQ down
      // By default the snake will move right
right:ADD R4,R4,#4 //+4 (bytes) moves right 1 pixel
      AND R0,R4,#256
      CMP R0,#256
      BEQ gameOver
      B reDraw
down: ADD R4,R4,#256 //+64*4 moves down one row
      MOV R0, #12284
      CMP R4,R0
      BGT gameOver
      B reDraw
up:   SUB R4,R4,#256 //-64*4 moves up one row
      CMP R4,#0
      BLT gameOver
      B reDraw
left: SUB R4,R4,#4 //-4 moves left 1 pixel
      AND R0,r4,#252
      CMP R0,#252
      BEQ gameOver
      B reDraw  //Not strictly necessary, but added for consistency
reDraw:
      //First check if the snake would be crossing itself
      ldr r0,[r4+r2] // read, from screen, contents of next pixel
      cmp r0,#.green //If it is snake colour...
      beq gameOver
      STR R1,[R4+R2] //Draw new head
      CMP R4, R10    //Check if apple eaten
      BNE .+3        //If not, skip to return
      ADD R11,R11, #1 //Incement score
      BL createApple
      RFE

//Generates random valid pixel position in R10
createApple: push {R0, LR}
newRandom:      LDR R10,.Random // gets a random 32 bit pattern
      MOV R0, #0x3ffc // Limit random to 14 bits (just larger than max pixel number)
      AND R10,R10,R0 
      MOV R0, #12284 //Max pixel number
      CMP R10,R0
      BGT newRandom //'Throw again'
      CMP R10,R4 // Test that apple is not located on head of snake
      BEQ newRandom 
      MOV R0, #.red
      STR R0, [R10 + R2] //Draw apple
      POP {R0, LR}
      RET

//Called by keyboard interrupt
//If valid key (W,A,S,D) has been pressed, transfer this to R9
keyPress: PUSH {R0}
      LDR R0,.LastKey //Read the last key pressed (but don't wait for one)
      CMP R0,#87 //W key
      BEQ updateLastKey
      CMP R0,#65 //A key
      BEQ updateLastKey
      CMP R0,#83 //S key
      BEQ updateLastKey
      CMP R0,#68 //D key
      BEQ updateLastKey
      B .+2  //If not a valid new key don't change last key
updateLastKey:
      MOV R9, R0
      POP {R0}
      RFE

gameOver: MOV R0, #over
      STR R0,.WriteString
      MOV R0, #score
      STR R0,.WriteString
      STR R11, .WriteSignedNum
      HALT //To stop program execution running into data area
over: .ASCIZ " Game Over!\n"
score: .ASCIZ "Your score: "