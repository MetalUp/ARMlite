//Register uses:
//multiple, temporary, purposes
//R1 mask for handling individual characters within word
//R2 current letter guess
MOV R3, #0 //successful guesses in right place(s), otherwise zeros
//R4 holds the character currently being matched
//R5 to R7 temporary use in processing
MOV R8, #0 //number of wrong guesses
MOV R9, #0 //number of matches made

captureWord:
MOV R0, #setter
STR R0, .WriteString
MOV R0, #secretWord 
STR R0, .ReadSecret //Permits entry without displaying text (like a password)

guessLetter:
MOV R0, #player
STR R0, .WriteString
waitForKey: LDR R2, .LastKeyAndReset
CMP R2, #0
BEQ waitForKey
ORR R2,R2,#32  //Forces the character to be lower case
MOV R6, #0  //Set to 1 if a NEW match is found
MOV R7, #0  //This will increment 0 > 8 > 16> 24 as a shift amount to select successive characters

checkForMatch:
MOV R1, #0xff  //The mask for character 1
LSL R1, R1, R7 //Shift mask to character of interest (first shift will be zero!)
AND R0,R3,R1  //Apply mask to past guesses
CMP R0, #0 
BEQ cont //If char position is NOT empty this char has been correctly guessed, so...
LSR R4,R0,R7
B writeChar
cont: 
LDR R0, secretWord
AND R0, R0, R1
LSR R4, R0, R7  //Get the char back to position 1
ORR R4,R4, #32  //Force the character to lower case
CMP R4, R2  
BNE notAMatch
ORR R3,R3,R0 
ADD R9,R9,#1
MOV R6, #1  //Set R6 to flag that the character has been matched
B writeChar
notAMatch:
MOV R4, #95 //Underscore
writeChar:
STR R4, .WriteChar
ADD R7,R7, #8  //Shift to next character
CMP R7, #32
BLT checkForMatch
MOV R0, #10 //Newline
STR R0, .WriteChar

//If there has not been a match, increment the number of misses
CMP R6, #0
BNE checkForWin
ADD R8, R8, #1
STR R8, .WriteUnsignedNum
MOV R0, #wrong
STR R0, .WriteString
B drawPic

checkForWin:
CMP R9, #4
BNE drawPic
MOV R0, #win
STR R0, .WriteString
HALT

drawPic:
CMP R8, #1
BLT endDraw
MOV R0, #.brown
STR R0, .Pixel739 //Upright
STR R0, .Pixel707 
STR R0, .Pixel675
STR R0, .Pixel643
STR R0, .Pixel611
STR R0, .Pixel579
STR R0, .Pixel547
STR R0, .Pixel515
STR R0, .Pixel483
STR R0, .Pixel451
CMP R8, #2
BLT endDraw
STR R0, .Pixel452 //Cross beam
STR R0, .Pixel452
STR R0, .Pixel453
STR R0, .Pixel454
STR R0, .Pixel455
CMP R8, #3
BLT endDraw  
MOV R0, #.grey
STR R0, .Pixel487 //Rope
CMP R8, #4
BLT endDraw
MOV R0, #.pink
STR R0, .Pixel519 //Head
CMP R8, #5
BLT endDraw
MOV R0, #.blue
STR R0, .Pixel551 //Body
STR R0, .Pixel583
STR R0, .Pixel615
CMP R8, #6
BLT endDraw
STR R0, .Pixel646 //Left leg
STR R0, .Pixel678
STR R0, .Pixel710
CMP R8, #7
BLT endDraw
STR R0, .Pixel648 //Right leg
STR R0, .Pixel680
STR R0, .Pixel712
CMP R8, #8
BLT endDraw
STR R0, .Pixel550 //Left arm
STR R0, .Pixel581
CMP R8, #9
BLT endDraw
STR R0, .Pixel552 //Right arm
STR R0, .Pixel585
endDraw: CMP R8, #10  //This many guesses means you're hung!
BLT guessLetter
MOV R0, #.black
STR R0, .Pixel519 //Head again
MOV R0, #lose
STR R0, .WriteString
MOV R0, #secretWord
STR R0, .WriteString
HALT

setter: .ASCIZ "Setter: Enter word (4 chars)\n"
player: .ASCIZ "Player: Try a letter\n"
win: .ASCIZ "You win!\n"
lose: .ASCIZ "You lose! Word was:"
wrong: .ASCIZ "wrong. "

.ALIGN 512
secretWord: 0
