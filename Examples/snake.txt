defineRegisters: 
      // R0 used for many temporary purposes
      // R1 used for colours
      mov r2,#.PixelScreen
      mov r3, #1084 //Tail position, initialised
      mov r4, #1088 //Head position, initialised
      mov r5, #0 //Apple position
      mov r6, #body //Pointer front of queue, initialised to first data loc
      add r7,r6,#4 //Pointer to head address in body data (1 after tail)
      mov r9, #68 //ASCII value of last key pressed initialised to D for eastward movement
      mov r10, #0 //Status: 0=running, 1=win, 2=loss

//Set up interrupts - but don't enable yet
      MOV R0, #updatePositions
      STR R0, .ClockISR
      MOV R0,#0x21
      STR R0,.ClockInterruptFrequency
      ldr r0,.LastKeyAndReset //Just to clear keyboard buffer
      MOV R0, #keyHandler
      STR R0, .KeyboardISR
      MOV R0, #1
      STR R0, .KeyboardMask


// Initialise game
      str r3, [r6] //r4 points to the tail address
      str r4, [r7] //r3 points to the head address
      mov r1, #.green  //Draw 2-segment snake in initial position
      str r1,[r3+r2]
      str r1,[r4+r2] 
      bl createApple
      STR R0, .InterruptRegister  //Now we are ready to handle interrupts

mainLoop: b mainLoop //Just keeps the processor running, pending interrupts

//Called by clock interrupt
updatePositions:
      push {}
      mov r1, #.red
      str r1,[r5+r2] //Draw Apple each cycle, in case it is on snake
//Switch on direction of last key
      cmp r9,#87 //W key
      beq up
      cmp r9,#65 //A key
      beq left
      cmp r9,#83 //S key
      beq down
      cmp r9,#68 //D key
      beq right //Not strictly necessary, but written for consistency
right:
      add r4,r4,#4 //Adding 1*4 to location moves right
      and r0,r4,#256
      cmp r0,#256
      beq gameOver
      b reDraw
down:
      add r4,r4,#256 //64*4 moves down one row on screen
      mov r0, #12284
      cmp r4,r0
      bgt gameOver
      b reDraw
up:
      sub r4,r4,#256 //-64*4 moves up one row on screen
      cmp r4,#0
      blt gameOver
      b reDraw
left: 
      sub r4,r4,#4 //-1 moves left
      and r0,r4,#252
      cmp r0,#252
      beq gameOver
      b reDraw  //Not strictly necessary, but added for consistency
reDraw: 
      cmp r4,r5 //If the head is in same location as apple...
      beq moveHead //...Skip updating the tail, to make snake grow
moveTail:
      ldr r0, [r6]
      mov r1, #.white
      str r1,[r0+r2] //Reset tail to Background
      add r6,r6,#4 //Increment the tail pointer (for use next cycle)
      cmp r6,#1024 //Check pointer is still within memory
      blt moveHead
      mov r6, #body //If not loop pointer back to start of body data
moveHead:
      add r7,r7,#4 //Increment the head pointer
      cmp r7,#1024 //Check pointer is still within limits
      blt updatePointer
      mov r7, #body //If not loop pointer back to start of body data
updatePointer:
      str r4, [r7] //Store the new head location in data
checkForCrossing: // check if the snake has hit itself
      ldr r0,[r4+r2] // read, from screen, colour of pixel head is moving to
      cmp r0,#.green //If it is snake colour
      beq gameOver
checkForMaxLength:
      cmp r6,r7 //If the front has caught up with rear, then body data full
      beq gameWin 
      mov r1, #.green
      str r1,[r4+r2] //Draw new head
      cmp r4, r5 //Check again if the apple was eaten this cycle
      bne .+2 //If no apple eaten, exit routine
      bl createApple
      pop {}
      rfe

//Called by keyboard interrupt
keyHandler: push {r0, lr}
      //If valid key, update R9
      ldr r0,.LastKey //Read the last key pressed (but don't wait for one)
      cmp r0,#87 //W key
      beq updateLastKey
      cmp r0,#65 //A key
      beq updateLastKey
      cmp r0,#83 //S key
      beq updateLastKey
      cmp r0,#68 //D key
      beq updateLastKey
      b .+2  //If not a valid new key don't change last key
updateLastKey:
      mov r9, r0
      pop {r0, lr}
      rfe


//Subroutine
createApple: push {r0, lr}
newRandom:      ldr r5,.Random // gets a random 32 bit pattern
      mov r0, #0x3ffc // Limit random to 14 bits (just larger than max pixel number)
      and r5,r5,r0 
      mov r0, #12284 //Max pixel number
      cmp r5,r0
      bgt newRandom
      cmp r5,r4 // Make sure apple is not located on head of snake
      beq newRandom 
      pop {r0, lr}
      ret

//Finally...
gameWin: 
      mov r0, #win
      b .+2
gameOver: mov r0, #over
      str r0,.WriteString
      halt //To stop program execution running into data area
win: .ASCIZ " You Win!"
over: .ASCIZ " Game Over!"

body: dat 0 //Initial front of queue (screen address for tail)
